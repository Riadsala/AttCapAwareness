install.packages("lme4")
install.packeges("car")
install.packages("car")
install.packages("Hmci")
install.packages("Hmisc")
install.packages("mnormt")
install.packages("psyhpy")
install.packages("psyphy")
install.packages("plyr")
install.packages("pdyphy")
install.packages("phyphy")
install.packages("psyphy")
q()
install.packages("psyphy")
setInternet2(use = TRUE)
install.packages("psyphy",repos="http://R-Forge.R-project.org", type="source")
install.packages("psyphy")
install.packages("ggplot2")
internet2
install.packages("httr")
capabilities()["libcurl"]
setInternet2(TRUE)
install.packages("httr")
install.packages("swirl", repos="http://cran.rstudio.com/", dependencies=TRUE)
install.packages("nnet", repos="http://cran.rstudio.com/", dependencies=TRUE)
install.packages("ggplot2")
install.packages("ggplot2", dependencies=TRUE)
install.packages("stringr")
2+2
library(ggplot2)
library(ggplot2)#
library(dplyr)#
#
people = 11#c(1,2,3,4,5,11)#
dat = data.frame()#
for (person in people)#
{#
    pdat = rbind(read.csv(paste('../results/', person, 'results.txt', sep='')),read.csv('../results/2results.txt')) #
    dat = rbind(dat, pdat)#
    rm(pdat)#
}#
# tell R that person and targetPresent are categorical factors#
dat$person = as.factor(dat$person)#
dat$targetPresent = as.factor(dat$targetPresent)#
levels(dat$block) = c("coloured", "uncoloured")#
#
# remove response = 3 (timed out?)#
dat = filter(dat, response!=3)#
#
# display number of incorrect trials - should be low!#
print(paste("misses:", 100*nrow(filter(dat, targetPresent==1, response==-1))/nrow(dat)))#
print(paste("false pos:", 100*nrow(filter(dat, targetPresent==0, response==1))/nrow(dat)))#
#
# remove incorrect trials from data#
dat = rbind(filter(dat, targetPresent==1, response==1), filter(dat, targetPresent==0, response==-1))#
#
dat$trialNumber = as.factor(dat$trialNumber)#
dat = filter(dat, block=='coloured')#
#
# dat$responseTime = log(dat$responseTime)#
# compute mean of median and 95% CI#
aggData = (dat #
  %>% group_by(person, block, visualise, trialNumber) #
    %>% summarise(#
     nTrials = length(responseTime),#
     meanRT     = mean(responseTime),#
     medianRT   = median(responseTime), #
     stddev     = sd(responseTime),#
     stderr=stddev/sqrt(nTrials),#
     lower=meanRT-1.96*stderr,#
     upper=meanRT+1.96*stderr))#
#
# plot! #
#
plt = ggplot(aggData, aes(x=trialNumber, y=meanRT, ymin=lower, ymax=upper, colour=visualise, group=visualise))#
plt = plt + geom_path() + geom_errorbar()#
plt = plt + geom_path(aes(y=medianRT), linetype=2)#
plt = plt + facet_wrap(~person, scales='free_y') + theme_bw()#
plt = plt +  scale_colour_brewer(palette="Set1")#
ggsave("pilotResults.pdf", height=4, width=8)#
plt#
# # sample to get CI estimates #
# ii = 0#
# for (n in seq(6,72,6))#
# {#
#     ii = ii + 1#
# sdat = dat[sample(x=nrow(dat), size=n),]#
# m[ii] = mean(sdat$responseTime)#
# stderr[ii] = sd(sdat$responseTime)/sqrt(n)#
#
# }#
# plt = ggplot(data.frame(m = m, n=seq(6,72,6), lower=m-1.96*stderr, upper=m+1.96*stderr), aes(x=n, y=m, ymin=lower, ymax=upper))#
# plt = plt + geom_errorbar() + geom_point() + scale_y_continuous(limits=c(0.3,0.7))#
# plt
install.packages("dplyr")
as.numeric.factor <- function(x) {as.numeric(levels(x))[x]}#
#
ProcessASC <- function(asc)#
{#
    fixDat =  data.frame(observer=numeric(), trial=numeric(), n=numeric(), x=numeric(), y=numeric(), dur=numeric())#
#
    trialStarts = grep("TRIAL_START[0-9]*", asc)#
    trialEnds   = grep("TRIAL_END[0-9]*", asc)#
    nTrials = length(trialStarts)#
#
    for (t in 1:nTrials)#
    {#
        trial = asc[trialStarts[t]:trialEnds[t]]#
        fixationLines = grep("EFIX", trial)#
        if (length(fixationLines)>0)#
        {#
            fixations = as.data.frame(matrix(unlist(trial[fixationLines]), byrow=T, ncol=6))#
#
            trialDat = data.frame(#
                observer=person, #
                trial=t, #
                x=as.numeric.factor(fixations$V4), y=as.numeric.factor(fixations$V5), dur=as.numeric.factor(fixations$V3))#
#
            # convert to stimulus coordinates#
             trialDat$n = 1:length(trialDat$x)#
             fixDat = rbind(fixDat, trialDat)#
             #rm(trialDat)#
#
        }#
    }#
    return(fixDat)#
} #
#
people = c(1,2)#,3,7,8,9,11,12,13,14,15,18,19)#
options(digits=3)#
rDat = data.frame(observer=numeric(), trial=numeric(), targLoc=numeric(), distLoc=numeric(), targDiscrim=numeric(), thoughtNoAttCap=numeric())#
fDat = data.frame(observer=numeric(), trial=numeric(), targLoc=numeric(), distLoc=numeric(), x=numeric(), y=numeric(), n=numeric())#
for (person in people)#
{#
    print(person)#
#
    dat = read.csv(paste("../results/obs", person, ".txt", sep=""))#
    rDat = rbind(rDat, dat)#
    rm(dat)#
#
    asc = readLines(paste("../results/attcap", person, ".asc.txt", sep=""))#
    asc = strsplit(asc, "\t")#
    dat = ProcessASC(asc)#
    fDat = rbind(fDat, dat)#
    rm(dat)#
}
wd()
getwe()
getwd()
setwd("/Users/s09ac3/Documents/AttCapAwareness/Experiments/2_ Authors Exp - Full disclosure/analysis")
getwd()
setwd("/Users/s09ac3/Documents/AttCapAwareness/Experiments/2_ Authors Exp - Full disclosure/analysis")#
#
as.numeric.factor <- function(x) {as.numeric(levels(x))[x]}#
#
ProcessASC <- function(asc)#
{#
    fixDat =  data.frame(observer=numeric(), trial=numeric(), n=numeric(), x=numeric(), y=numeric(), dur=numeric())#
#
    trialStarts = grep("TRIAL_START[0-9]*", asc)#
    trialEnds   = grep("TRIAL_END[0-9]*", asc)#
    nTrials = length(trialStarts)#
#
    for (t in 1:nTrials)#
    {#
        trial = asc[trialStarts[t]:trialEnds[t]]#
        fixationLines = grep("EFIX", trial)#
        if (length(fixationLines)>0)#
        {#
            fixations = as.data.frame(matrix(unlist(trial[fixationLines]), byrow=T, ncol=6))#
#
            trialDat = data.frame(#
                observer=person, #
                trial=t, #
                x=as.numeric.factor(fixations$V4), y=as.numeric.factor(fixations$V5), dur=as.numeric.factor(fixations$V3))#
#
            # convert to stimulus coordinates#
             trialDat$n = 1:length(trialDat$x)#
             fixDat = rbind(fixDat, trialDat)#
             #rm(trialDat)#
#
        }#
    }#
    return(fixDat)#
} #
#
people = c(1,2)#,3,7,8,9,11,12,13,14,15,18,19)#
options(digits=3)#
rDat = data.frame(observer=numeric(), trial=numeric(), targLoc=numeric(), distLoc=numeric(), targDiscrim=numeric(), thoughtNoAttCap=numeric())#
fDat = data.frame(observer=numeric(), trial=numeric(), targLoc=numeric(), distLoc=numeric(), x=numeric(), y=numeric(), n=numeric())#
for (person in people)#
{#
    print(person)#
#
    dat = read.csv(paste("../results/obs", person, ".txt", sep=""))#
    rDat = rbind(rDat, dat)#
    rm(dat)#
#
    asc = readLines(paste("../results/attcap", person, ".asc.txt", sep=""))#
    asc = strsplit(asc, "\t")#
    dat = ProcessASC(asc)#
    fDat = rbind(fDat, dat)#
    rm(dat)#
}
ls()
dir()
paste("../results/obs", person, ".txt", sep="")
dat = read.csv(paste("../results/obs", person, ".txt", sep=""))
setwd("/Users/s09ac3/Documents/AttCapAwareness/Experiments/2_ Authors Exp - Full disclosure/analysis")#
#
as.numeric.factor <- function(x) {as.numeric(levels(x))[x]}#
#
ProcessASC <- function(asc)#
{#
    fixDat =  data.frame(observer=numeric(), trial=numeric(), n=numeric(), x=numeric(), y=numeric(), dur=numeric())#
#
    trialStarts = grep("TRIAL_START[0-9]*", asc)#
    trialEnds   = grep("TRIAL_END[0-9]*", asc)#
    nTrials = length(trialStarts)#
#
    for (t in 1:nTrials)#
    {#
        trial = asc[trialStarts[t]:trialEnds[t]]#
        fixationLines = grep("EFIX", trial)#
        if (length(fixationLines)>0)#
        {#
            fixations = as.data.frame(matrix(unlist(trial[fixationLines]), byrow=T, ncol=6))#
#
            trialDat = data.frame(#
                observer=person, #
                trial=t, #
                x=as.numeric.factor(fixations$V4), y=as.numeric.factor(fixations$V5), dur=as.numeric.factor(fixations$V3))#
#
            # convert to stimulus coordinates#
             trialDat$n = 1:length(trialDat$x)#
             fixDat = rbind(fixDat, trialDat)#
             #rm(trialDat)#
#
        }#
    }#
    return(fixDat)#
} #
#
people = c(1,2)#,3,7,8,9,11,12,13,14,15,18,19)#
options(digits=3)#
rDat = data.frame(observer=numeric(), trial=numeric(), targLoc=numeric(), distLoc=numeric(), targDiscrim=numeric(), thoughtNoAttCap=numeric())#
fDat = data.frame(observer=numeric(), trial=numeric(), targLoc=numeric(), distLoc=numeric(), x=numeric(), y=numeric(), n=numeric())#
for (person in people)#
{#
    print(person)#
#
    dat = read.csv(paste("../results/obs", person, ".txt", sep=""))#
    rDat = rbind(rDat, dat)#
    rm(dat)#
#
    asc = readLines(paste("../results/attcap", person, ".asc.txt", sep=""))#
    asc = strsplit(asc, "\t")#
    dat = ProcessASC(asc)#
    fDat = rbind(fDat, dat)#
    rm(dat)#
}
setwd("/Users/s09ac3/Documents/AttCapAwareness/Experiments/2_ Authors Exp - Full disclosure/analysis")#
#
as.numeric.factor <- function(x) {as.numeric(levels(x))[x]}#
#
ProcessASC <- function(asc)#
{#
    fixDat =  data.frame(observer=numeric(), trial=numeric(), n=numeric(), x=numeric(), y=numeric(), dur=numeric())#
#
    trialStarts = grep("TRIAL_START[0-9]*", asc)#
    trialEnds   = grep("TRIAL_END[0-9]*", asc)#
    nTrials = length(trialStarts)#
#
    for (t in 1:nTrials)#
    {#
        trial = asc[trialStarts[t]:trialEnds[t]]#
        fixationLines = grep("EFIX", trial)#
        if (length(fixationLines)>0)#
        {#
            fixations = as.data.frame(matrix(unlist(trial[fixationLines]), byrow=T, ncol=6))#
#
            trialDat = data.frame(#
                observer=person, #
                trial=t, #
                x=as.numeric.factor(fixations$V4), y=as.numeric.factor(fixations$V5), dur=as.numeric.factor(fixations$V3))#
#
            # convert to stimulus coordinates#
             trialDat$n = 1:length(trialDat$x)#
             fixDat = rbind(fixDat, trialDat)#
             #rm(trialDat)#
#
        }#
    }#
    return(fixDat)#
} #
#
people = c(1,2)#,3,7,8,9,11,12,13,14,15,18,19)#
options(digits=3)#
rDat = data.frame(observer=numeric(), trial=numeric(), targLoc=numeric(), distLoc=numeric(), targDiscrim=numeric(), thoughtNoAttCap=numeric())#
fDat = data.frame(observer=numeric(), trial=numeric(), targLoc=numeric(), distLoc=numeric(), x=numeric(), y=numeric(), n=numeric())#
for (person in people)#
{#
    print(person)#
#
    dat = read.csv(paste("../results/obs", person, ".txt", sep=""))#
    rDat = rbind(rDat, dat)#
    rm(dat)#
#
    asc = readLines(paste("../results/attcap", person, ".asc", sep=""))#
    asc = strsplit(asc, "\t")#
    dat = ProcessASC(asc)#
    fDat = rbind(fDat, dat)#
    rm(dat)#
}
setwd("/Users/s09ac3/Documents/AttCapAwareness/Experiments/2_ Authors Exp - Full disclosure/analysis")#
#
as.numeric.factor <- function(x) {as.numeric(levels(x))[x]}#
#
ProcessASC <- function(asc)#
{#
    fixDat =  data.frame(observer=numeric(), trial=numeric(), n=numeric(), x=numeric(), y=numeric(), dur=numeric())#
#
    trialStarts = grep("TRIAL_START[0-9]*", asc)#
    trialEnds   = grep("TRIAL_END[0-9]*", asc)#
    nTrials = length(trialStarts)#
#
    for (t in 1:nTrials)#
    {#
        trial = asc[trialStarts[t]:trialEnds[t]]#
        fixationLines = grep("EFIX", trial)#
        if (length(fixationLines)>0)#
        {#
            fixations = as.data.frame(matrix(unlist(trial[fixationLines]), byrow=T, ncol=6))#
#
            trialDat = data.frame(#
                observer=person, #
                trial=t, #
                x=as.numeric.factor(fixations$V4), y=as.numeric.factor(fixations$V5), dur=as.numeric.factor(fixations$V3))#
#
            # convert to stimulus coordinates#
             trialDat$n = 1:length(trialDat$x)#
             fixDat = rbind(fixDat, trialDat)#
             #rm(trialDat)#
#
        }#
    }#
    return(fixDat)#
} #
#
people = c(1,2)#,3,7,8,9,11,12,13,14,15,18,19)#
options(digits=3)#
rDat = data.frame(observer=numeric(), trial=numeric(), targLoc=numeric(), distLoc=numeric(), targDiscrim=numeric(), thoughtNoAttCap=numeric())#
fDat = data.frame(observer=numeric(), trial=numeric(), targLoc=numeric(), distLoc=numeric(), x=numeric(), y=numeric(), n=numeric())#
for (person in people)#
{#
    print(person)#
#
    dat = read.csv(paste("../results/obs", person, ".txt", sep=""))#
    rDat = rbind(rDat, dat)#
    rm(dat)#
#
    asc = readLines(paste("../results/attcap", person, ".asc", sep=""))#
    asc = strsplit(asc, "\t")#
    dat = ProcessASC(asc)#
    fDat = rbind(fDat, dat)#
    rm(dat)#
}#
#
# sort out missing targDiscrim data#
rDat$targDiscrim[which(rDat$targDiscrim==-1)] = NaN#
rDat$thoughtNoAttCap[which(rDat$thoughtNoAttCap==-1)]=0#
rDat$thoughtNoAttCap = as.logical(rDat$thoughtNoAttCap)#
rDat$distracter = 1#
rDat$distracter[which(rDat$distLoc==0)] = 0#
#
format(aggregate(data=rDat, thoughtNoAttCap~observer+distracter, FUN=mean),ndigt=3)#
#
# sort out distLoc#
rDat$distLocRel = (rDat$distLoc - (rDat$targLoc-1)) %% 6#
rDat$distLocRel[which(rDat$distLoc==0)]=1#
rDat$distLocRel[which(rDat$distLoc==5)]=2#
rDat$distLocRel[which(rDat$distLoc==4)]=3#
rDat$distLocRel[which(rDat$distracter==0)]=0#
#
aggregate(data=rDat, thoughtNoAttCap~observer+distLoc, FUN=mean)#
#
write.csv(fDat, "fixations.csv", row.names=F, quote=F)#
write.csv(rDat, "responses.csv", row.names=F, quote=F)
cDat = rbind(cDat, data.frame(n='c', phi=NA, x=0, y=0))
library(ggplot2)#
options(digits=3)#
fDat = read.csv("fixations.csv")#
rDat = read.csv("responses.csv")#
#
cbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")#
#
# get circle locations - use twice as many to include ALL#
# potential distracter locations#
#
R = 256#
circLabels=c('1','d1','2','d2','3','d3','4','d4','5','d5','6','d6')#
cDat = data.frame(n=factor(1:12, labels=circLabels))#
cDat$phi = 2*(as.numeric(cDat$n)+1)*pi/12 #
cDat$x = R * -cos(cDat$phi)#
cDat$y = R * sin(cDat$phi)#
cDat = rbind(cDat, data.frame(n='c', phi=NA, x=0, y=0))#
circLabels=cbind(circLabels, 'c')#
#
# first, transform (x,y) to stimuli coordinates#
fDat$x = fDat$x - (1280-1024)/2 - 512#
fDat$y = -(fDat$y - 512)#
#
# ggplot(fDat, aes(x=x, y=y,colour=trial)) + geom_path()#
#
dC = array(0, c(nrow(fDat),13))#
#
for (n in 1:13)#
{#
    dC[,n] =  (fDat$y - cDat$x[n])^2 + (fDat$x - cDat$y[n])^2#
}#
#
dC[which(dC>100^2)] = NaN#
#
for (f in 1:nrow(fDat))#
{#
    if (sum(is.finite(dC[f,]))==1)#
    {#
        fDat$aoi[f] = circLabels[which(is.finite(dC[f,]))]#
        # now code into centre/target/distracter/na code#
        tr = fDat$trial[f]#
        target = rDat$targLoc[tr]#
        if (fDat$aoi[f] == "c")#
        {#
            fDat$aoi2[f] = "centre"#
        } else if (fDat$aoi[f] == as.character(target))#
        {#
            fDat$aoi2[f] = "target"#
        } else {#
            fDat$aoi2[f] = "nope"#
        }#
    }#
    else#
    {#
        fDat$aoi[f] = NA#
        fDat$aoi2[f] = "na"#
    }#
}#
#
# fDat$aoi2 = as.factor(fDat$aoi2)#
# # # now check each trial is valid and whether capture occurs#
#
# for (tr in 1:nrow(rDat))#
# {#
#   tfDat = fDat[which(fDat$trial==rDat$trial[tr] & fDat$observer==rDat$observer[tr]),]#
#   plt = ggplot() + geom_path(data=tfDat, aes(x=x, y=y)) #+ geom_text(data=tfDat, aes(x=x, y=y))#, label=aoi2#
#   plt = plt + geom_text(aes(x=cDat$y,y=cDat$x, label=cDat$n))#
#   ggsave(paste("trial", tr, ".png", sep=""))#
#
# }
library(ggplot2)#
library(colorspace)#
options(digits=3)#
fDat = read.csv("fixations.csv")#
rDat = read.csv("responses.csv")#
fDat$observer = as.factor(fDat$observer)#
rDat$pathLength = 0#
rDat$nFix = 0#
#
colours <- rainbow_hcl(4, start = 90, end = -30)#
#
for (tr in 1:nrow(rDat))#
{#
    fix = fDat[which((fDat$trial==rDat$trial[tr]) & (fDat$observer==rDat$observer[tr])),]#
    rDat$nFix[tr] = nrow(fix)#
    if (nrow(fix)>1)#
    {#
        amp = sqrt((fix$x[1])^2+(fix$y[1])^2)#
        for (f in 2:nrow(fix))#
        {#
            amp = sqrt((fix$x[f]-fix$x[f-1])^2+(fix$y[f]-fix$y[f-1])^2)#
            rDat$pathLength[tr] = rDat$pathLength[tr] + amp#
        }#
        rm(amp)#
    }#
    else#
    {#
        rDat$pathLength[tr] = NaN#
    }#
}#
aggregate(data=rDat, targDiscrim ~ observer + distracter, FUN=mean)#
aggregate(data=rDat, thoughtNoAttCap ~ observer + distracter, FUN=mean)#
aggregate(data=rDat, nFix ~ observer + distracter, FUN=mean)#
#
dat = rDat[-which(rDat$nFix<2),]#
#dat = dat[-which(dat$distracter==0 & dat$thoughtNoAttCap==0),]#
#
# ggplot(dat, aes(x=(pathLength/256), fill=thoughtNoAttCap)) + geom_histogram(binwidth = 0.25) + facet_grid(observer~distracter)#
# ggsave("../graphs/pathLengthComp.pdf")#
#
# now classify by pathlength#
dat$pathLength = dat$pathLength/256#
dat$captured = (abs(dat$pathLength - 1) > 0.2)#
#
aggregate(data=dat, thoughtNoAttCap ~ captured + observer, FUN=mean)#
#
levels(dat$observer)=as.character(seq(1,10))#
#
dat$captured = as.factor(dat$captured)#
levels(dat$captured) = c("good", "bad")#
#
dat$observer = as.factor(dat$observer)#
levels(dat$observer)=as.character(seq(1,10))#
 dat$thoughtNoAttCap = as.factor(dat$thoughtNoAttCap)#
 levels(dat$thoughtNoAttCap) = c("bad", "good")#
#
plt = ggplot(dat, aes(x=captured, fill=thoughtNoAttCap)) + geom_histogram(binwidth = 0.1) + facet_grid(~observer)#
plt = plt + theme_bw() + scale_y_continuous(name="number of trials") + scale_x_discrete(name=" ")#
plt = plt + theme(legend.position="top") + scale_fill_discrete(name="responded that the trial was:")#
# plt = plt + scale_fill_manual(values=colours)#
ggsave("../graphs/capturedAndThoughtA.pdf", width=10, height=5)#
ggsave("../graphs/capturedAndThoughtA.png", width=10, height=5)#
aggregate(data=rDat, targDiscrim ~ observer, FUN=mean)#
library(Hmisc)#
pointEst = binconf(aggregate(data=dat, thoughtNoAttCap ~ captured + observer, FUN=sum)[,3], aggregate(data=dat, thoughtNoAttCap ~ captured + observer, FUN=length)[,3])#
a = aggregate(data=dat, thoughtNoAttCap ~ captured + observer, FUN=mean)#
# dat2 = data.frame(observer=a[,2], captured=a[,1], thoughtGoodTrial=a[,3], lower=pointEst[,2], upper=pointEst[,3])#
# plt = ggplot(dat2, aes(x=captured, y=thoughtGoodTrial)) + geom_point(stat="identity") + facet_grid(~observer)#
# plt = plt + geom_errorbar(aes(ymin=lower, ymax=upper)) + scale_fill_manual(values=colours)#
# plt = plt + theme_bw() + scale_y_continuous(name="responded that the trial was good")#
# ggsave("../graphs/capturedAndThoughtB.pdf", width=10, height=5)#
# ggsave("../graphs/capturedAndThoughtB.png", width=10, height=5)#
# calculate prec and recall for each person#
dat_pr = data.frame(person=character(), stat=factor(levels=c('accuracy', 'precision', 'rec')), val=numeric())#
#
for (person in levels(dat$observer))#
{#
    pdat = dat[which(dat$observer==person),]#
    prec = sum(pdat$captured=="bad" & pdat$thoughtNoAttCap=="bad")/sum(pdat$thoughtNoAttCap=="bad")#
    recall = sum(pdat$captured=="bad" & pdat$thoughtNoAttCap=="bad")/sum(pdat$captured=="bad")#
    acc = mean((pdat$captured=="bad") == (pdat$thoughtNoAttCap==FALSE))#
    dat_pr = rbind(dat_pr, data.frame(person=person, stat="precision", val=prec))#
    dat_pr = rbind(dat_pr, data.frame(person=person, stat="recall", val=recall))#
    # dat_pr = rbind(dat_pr, data.frame(person=person, stat="f1", val=2*prec*recall/(prec+recall)))#
    dat_pr= rbind(dat_pr, data.frame(person=person, stat="accuracy", val=acc))#
}#
#
dat_pr$stat = factor(dat_pr$stat, levels=c('accuracy', 'precision', 'recall'))#
#
plt = ggplot(dat_pr, aes(x=stat, y=val, fill=stat)) + geom_boxplot() + scale_fill_manual(values=colours)#
plt = plt + theme_bw() + theme(axis.title.x = element_blank(), axis.title.y = element_blank(), legend.position="none")#
ggsave("../graphs/f1score.pdf", height=5, width=5)#
ggsave("../graphs/f1score.png", height=5, width=5)
summary(dat)
